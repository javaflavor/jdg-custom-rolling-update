# Cache name to be store key list.
# If this property is set like "keyCahce", any keys of any target
# cache is dumped into the same cache named "keyCache".
# If this property is undefined, the keys are stored in the same
# cache of the target cache.
migration.key_cache_name = default

# Cache name suffix to be store key list, which is effective
# only if migration.key_cache_name property is undefined.
# For example,
# if migration.key_cache_name_suffix = #keys,
#     dumped cache name: <target cache name> + "#keys".
# If  migration.key_cache_name_suffix = null or emply,
#     dumpled cache name: <target cache name>
#
# migration.key_cache_name_suffix = #keys
migration.key_cache_name_suffix = 

# Prefix of indexed dumped keys.
# If migration.key_cache_name is null or empty, the storing keys are:
#     <migration.key_name_prefix> + <index>
#     ex.: "___KEYS___0", "___KEYS___1", ... 
# Otherwise, the storing keys are:
#     <migration.key_name_prefix> + <target cache name> + <index>
#     ex.: "___KEYS___userinfo0", "___KEYS___userinfo1", ... 
migration.key_name_prefix = ___KEYS___

# Max number of keys to be stored in each entry.
# If this property = 1, each key are stored in one entry.
# Otherwise, the stored values are List<Object>.
migration.max_num_keys = 10000

# Marshaller class
# If you use custom marshaller at Hot Rod client, the same marshaller
# class name must be specified here. Otherwise, default marshaller is used.
migration.marshaller =

# Timeout(min) for operation recordKnownGlobalKeyset().
migration.record_timeout_min = 10

# Timeout(min) for operation synchronizeData().
migration.synchronize_timeout_min = 10
